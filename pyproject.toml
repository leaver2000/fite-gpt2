[build-system]
requires = [
    "setuptools>=58.2.0", 
    "wheel",
]   
build-backend = "setuptools.build_meta"

[project]
name = "fite"
version = "0.0.1"
description = "Forecaster Intergrated TAF Environment; a Python package for autocompletion of Terminal Aerodrome Forecasts."
authors = [
    {name = "Jason Leaver", email = "jason.leaver@us.af.mil"},
]
license = {file = 'LICENSE'}
requires-python = ">=3.10"
dependencies = [
    "numpy==1.23.5",
    "pandas==1.5.1",
    "torch==1.13.0",
    "datasets==2.7.0",
    "tokenizers==0.13.2",
    "transformers==4.24.0",
    "pyarrow==10.0.0",
    "fastapi==0.87.0",
    "toml==0.10.2",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Topic :: Utilities",
]
[project.optional-dependencies]
server = ["uvicorn >= 0.20.0"]
# [setuptools] https://setuptools.pypa.io/en/latest/userguide/datafiles.html
[tool.setuptools] 
include-package-data = true
[tool.setuptools.packages.find]
where = ["src"]
[tool.setuptools.package-data]
fite = ["py.typed"]
# [fite]
[tool.fite]
root-path = "store/"

[[tool.fite.models]]
base-model = "gpt2"
dataset = "taf"
version = "base1"
model-name = "gpt2-taf-base1"
# if the model above was to be retrained, as a new revision, the following would be used
# base-model = "gpt2-taf-base1"
# dataset = "taf"
# version = "2022-01-01"
# model-name = "gpt2-taf-base1.2022-01-01"
description = "A GPT-2 model trained on terminal aerodrome forecasts."
# whole word tokens should be prefiexed with the unicode character -> \u0120
additional-tokens = ["TAF", "\u0120BECMG", "\u0120TEMPO"]
additional-special-tokens = ["\u0120LAST", "\u0120NO", "\u0120AMDS", "\u0120RMK", "\u0120COR"] #, "[metadata]"]
# the metadata pattern should be a regex extractable pattern that will be used to extract the metadata from the dataset
# in the TAF example we are extracting the max and minimum temperatures from the TAF
# metadata-pattern = "?(?P<TX>TXM?\\d{2})\\/\\d{4}Z\\sTN?(?P<TN>M?\\d{2})\\/\\d{4}Z$"
metadata-pattern = "(?:(TXM?/\\d{2}).+(TNM?/\\d{2}))$"

prompt-examples = [
    "TAF [TX20 TN13] AMD KDAA 251400Z 2514/2616 VRB03KT 9000 BR",
    "TAF [TX08 TN02] AMD KHOP 151230Z 1512/1614 23005KT 4800 -SHRA BR OVC004",
    "TAF [TXM03 TNM08] AMD KRDR 141452Z 1414/1516",
    "TAF [TX26 TN15] KFTK 041900Z 0419/0601 18012G22KT 9999",
    "TAF [TX21 TN14] KFAF 031000Z 0310/0416 04006KT 9999 BKN007",
    "TAF [TX19 TN09] AMD KFTK 011405Z 0114/0217 24005KT 9999",
    "TAF [TX05 TN00] AMD KFTK 151405Z 1514/1618 12006KT 9999 -DZ",
    "TAF [TX21 TN06] AMD KADW 130515Z 1305/1407 29015G25KT 9999",
    "TAF [TX14 TN02] KFAF 151900Z 1519/1701 13009KT 9999 OVC020",
    "TAF [TX04 TNM03] KFFO 130302Z 1303/1409 28009KT 9000 -SN BKN009 OVC020 620098",
    "TAF [TX02 TNM03] AMD KFFO 121425Z 1214/1317 29009KT 6000",
    "TAF [TX20 TN11] KMUI 311900Z 3119/0201 VRB06KT 9999 FEW015 OVC025",
    "TAF [TX20 TN08] KMUI 021100Z 0211/0317 VRB06KT 9999 SCT015",
    "TAF [TX02 TNM03] KFFO 121100Z 1211/1317 29012KT 9999 BKN022",
    "TAF [TX01 TN00] AMD KMTC 152130Z 1521/1702 VRB06KT 2800 -SN OVC015",
    "TAF [TX16 TN02] AMD KFFO 111351Z 1113/1217 11006KT 6000 -RA BR",
    "TAF [TXM03 TNM07] KRDR 101000Z 1010/1116 02020G30KT 9999",
    "TAF [TX11 TN00] AMD KADW 161523Z 1615/1715 29012G18KT 9999 BKN030 BKN200 510013",
    "TAF [TX16 TN12] KLFI 090000Z 0900/1006 04012G18KT 9999 SKC",
    "TAF [TXM07 TNM09] PABI 161400Z 1614/1720 10015G25KT 9999 FEW030 510043",
    "TAF [TX03 TNM03] KBLV 160000Z 1600/1706 30009KT 9999 OVC020",
    "TAF [TXM04 TNM13] KRDR 151000Z 1510/1616 35006KT 9999",
    "TAF [TXM13 TNM24] AMD PAFB 011013Z 0110/0212 VRB03KT 9999",
    "TAF [TX17 TN06] KGUS 061300Z 0613/0719 18009KT FEW150",
    "TAF [TX22 TN13] AMD KWRI 120435Z 1204/1308 18015G25KT 9999 VCSH SCT012",
    "TAF [TX06 TN03] PASY 101400Z 1014/1120 02030G40KT 9000 -SHRA SCT003 OVC010",
    "TAF [TXM01 TNM07] AMD KRDR 092100Z 0921/1024 36010G20KT 8000 -SN OVC009",
    "TAF [TXM08 TNM20] PAFB 160700Z 1607/1713 06010KT",
    "TAF [TX18 TN06] KADW 100100Z 1001/1107 08006KT 9999 FEW200",
    "TAF [TX11 TN03] AMD KDOV 161144Z 1611/1714",
    "TAF [TX24 TN09] KLFI 121800Z 1218/1324 25009KT 9999",
    "TAF [TX09 TNM01] KWRI 140200Z 1402/1508 31009KT 9999 SKC QNH3005INS",
    "TAF [TXM06 TNM12] AMD KRDR 150742Z 1507/1608",
    "TAF [TX19 TN13] KBLV 100000Z 1000/1106 14009KT 9999 FEW050",
    "TAF [TX19 TN09] AMD KFTK 011530Z 0115/0217",
    "TAF [TX24 TN19] AMD KLFI 111128Z 1111/1215",
    "TAF [TXM13 TNM24] PAFB 010600Z 0106/0212 VRB03KT 9999 BKN040 BKN100",
    "TAF [TX26 TN07] KDAA 071200Z 0712/0818 VRB06KT",
    "TAF [TX02 TNM04] AMD KBLV 161934Z 1619/1722 28012G20KT 9999 SCT030 BKN050 BKN080",
    "TAF [TXM09 TNM13] PAFB 151500Z 1515/1621 VRB03KT 8000 BR OVC006"
]

[[tool.fite.models]]
base-model = "gpt2-taf-base1"
dataset = "taf"
version = "dev1"
model-name = "gpt2-taf-base1.dev1"
# description = "A GPT-2 model trained on epr bullets."
additional-tokens = ["TAF", "\u0120BECMG", "\u0120TEMPO"]
additional-special-tokens = ["\u0120LAST", "\u0120NO", "\u0120AMDS", "\u0120RMK", "\u0120COR"]
# in this training set 5, 3 of which were amened TAFs were added for the KBLV and KADW 
# the 2 forecast we diffrent enough from each other for this evaluation.  The objective
# is to see if the model can learn to generate a forecast that is similar to the previous
# while factoring ammendments with out contamitation from other forecasts.
# The current forecast were not included in the training set.
# [KBLV]
# ---- CURRENT KBLV forecast ----
# ISSUED FORECAST: @ 2022-12-08T06-00Z
# TAF KBLV 081600Z 0816/0922 07006KT 1600 -RA BR OVC006 QNH3021INS
# BECMG 0822/0823 07006KT 1200 BR OVC005 QNH3011INS
# BECMG 0916/0917 27015G20KT 6000 BR BKN014 QNH3012INS
# BECMG 0917/0918 27012G18KT 9999 NSW SCT050 QNH3008INS
# BECMG 0920/0921 28015G20KT 9999 BKN030 QNH3009INS TX10/0916Z TN07/0816Z
# ---- context ----
# the previous forecast was acutally incorrect with rain stopping at 1600Z
# so that forecast was ameneded extending the rain till 1800Z
# ---- AMENDED FORECAST: @ 2022-12-08T12-10Z ----
# TAF AMD KBLV 081210Z 0812/0914 03006KT 4800 -RA OVC008 QNH3018INS
# BECMG 0813/0814 07006KT 8000 -SHRA BKN009 OVC020 QNH3016INS
# BECMG 0817/0818 08006KT 9999 NSW BKN020 OVC050 QNH3004INS TX09/0816Z TN05/0813Z
# ---- 0800Z FORECAST: @ 2022-12-08T08-00Z ----
# TAF KBLV 080800Z 0808/0914 03006KT 4800 -RA SCT020 OVC030 QNH3025INS
# BECMG 0810/0811 05006KT 8000 -DZ SCT010 OVC020 QNH3019INS
# TEMPO 0811/0813 4800 -RA OVC010
# BECMG 0813/0814 07006KT 8000 BR BKN010 OVC020 QNH3016INS
# BECMG 0815/0816 08006KT 9999 NSW BKN020 OVC050 QNH3004INS TX09/0816Z TN05/0813Z
# ---- prompt ----
# TAF [TXM10 TNM07] KBLV 081600Z 0816/0922 07006KT 1600
# ---- expected output ----
# TAF [TXM10 TNM07] KBLV 081600Z 0816/0922 07006KT 1600 -RA BR OVC006 QNH3021INS

# [KADW]
# ---- CURRENT KADW forecast ----
# ISSUED FORECAST: @ 2022-12-08T17-00Z
# TAF KADW 081700Z 0817/0923 04010KT 9999 FEW030 BKN200 QNH3026INS <-----------
# BECMG 0823/0824 36008KT 9999 BKN020 OVC120 QNH3024INS                        |
# BECMG 0918/0919 02010KT 9999 SCT025 QNH3025INS TX13/0819Z TN05/0912Z         |
# ---- AMENDED 1306Z: @ 2022-12-08T13-06Z ----                                 |
# TAF AMD KADW 081306Z 0813/0915 33010KT 9999 BKN030 BKN250 QNH3024INS         |
# BECMG 0817/0818 35012KT 9999 BKN020 OVC160 QNH3020INS     ------------------>
# BECMG 0822/0823 01008KT 9999 SCT025 OVC120 QNH3024INS    
# BECMG 0906/0907 02010KT 9999 BKN025 600251 QNH3026INS TX11/0819Z TN06/0908Z
# ---- AMENDED 1040Z: @ 2022-12-08T10-40Z ----
# TAF AMD KADW 081040Z 0810/0915 33004KT 9999 BKN030 OVC250 QNH3020INS
# BECMG 0812/0813 34010G20KT 9999 BKN030 BKN250 QNH3025INS
# BECMG 0817/0818 35012KT 9999 BKN020 OVC160 QNH3020INS
# BECMG 0822/0823 01008KT 9999 SCT025 OVC120 QNH3024INS
# BECMG 0906/0907 02010KT 9999 BKN025 600251 QNH3026INS TX11/0819Z TN06/0908Z
# ---- FORECAST 0900Z @ 2022-12-08T09-00Z ----
# TAF KADW 080900Z 0809/0915 33004KT 1600 BR BKN002 OVC250 QNH3020INS
# TEMPO 0809/0813 3200 BR SCT002
# BECMG 0812/0813 34010G20KT 9999 NSW BKN015 BKN250 QNH3025INS
# BECMG 0817/0818 35012KT 9999 BKN020 OVC160 QNH3020INS
# BECMG 0822/0823 01008KT 9999 SCT025 OVC120 QNH3024INS
# BECMG 0906/0907 02010KT 9999 BKN025 600251 QNH3026INS TX11/0819Z TN06/0908Z



prompt-examples = [
    # challenge 1.0: predict the a reduced visibility; context -> previous forecast
    "TAF [TXM10 TNM07] KBLV 081600Z 0816/0922 07006KT",
    # challenge 1.1: present weather; context -> previous forecast & reduced visibility
    "TAF [TXM10 TNM07] KBLV 081600Z 0816/0922 07006KT 1600",
    # challenge 1.2: timing; context -> previous forecast & reduced visibility & rain & low ceiling & BECMG
    "TAF [TXM10 TNM07] KBLV 081600Z 0816/0922 07006KT 1600 -RA BR OVC006 QNH3021INS\nBECMG", # ... 0822/0823
    # challenge 2.0: predict the a unrestricted visibility; context -> previous forecast
    "TAF [TX13 TN05] KADW 081700Z 0817/0923 04010KT", # ...
    # challenge 2.1: timing and ceiling; context -> previous forecast & unrestricted visibility & BECMG
    "TAF [TX13 TN05] KADW 081700Z 0817/0923 04010KT 9999 FEW030 BKN200 QNH3026INS\nBECMG", # ... 0823/0824
]

